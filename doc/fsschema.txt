*****

Aquefir ANSI C Project Schema

Copyright © 2020 Aquefir.

*****

1. INTRODUCTION

A navigable repository must have a predictable layout. This schema defines
a final file-folder hierarchy for a complete generic ANSI C project, including
all folders and data. It is for ANSI C systems what the Filesystem Hierarchy
Standard is for Linux.

2. FILE/FOLDER PATTERNS

Here enumerated is a list of regex literals for permissible file/folder names.
They are written relative to the repository root, and forward slashes separate
directories. Files ignored by Git are not considered here.

/^Makefile$/
	The project’s Makefile (used for building)

/^COPYING$/
	legal disclaimers and/or code licensing

/^README$/
	the README file!

/^CONTRIBUTING$/
	Project contributor’s guide

/^COMPILING$/
	Build guide for users

/^INSTALL$/
	Installation guide for users

/^\.([A-Za-z0-9_\-\.]+\/?)+$/
	Dotfiles (and folders) in the repository root
Regex breakdown:
	- dot only applies in repo root (not just any subfolder)
	- upper & lower alphanumeric, plus underscore/dash/dot
	- files and folders both

/^src\/([a-z0-9]{1,8}\/)*\/[a-z0-9]{1,8}\.[ch]$/
	Project sources, and private headers if distinguished from public ones
Regex breakdown:
	- subfolder and file names are limited to 8 characters for brevity
	- names must be all lowercase, for consistency
	- names cannot contain dashes or underscores, for consistency when slashes
	are mutated into underscores with symbols

/^include\/([a-z0-9]{1,8}\/)*[a-z0-9]{1,8}\.h$/
	Project API headers

/^doc\/([a-z0-9]{1,8}\/)*[a-z0-9]{1,8}\.txt$/
	Project documentation, with files corresponding to ones in src/

/^util\/(?!(opt))/
	Utility scripts for project maintenance

/^util\/opt\//
	“Extra” utility scripts that are useful to maintainers but are not hard
	dependencies for maintenance

/^data\//
	Folder for non-code assets or data, useful for working without git-lfs

/^etc\//
	Miscellaneous folder, the contents of which may be anything

3. ADDENDA

There are several additional notes about the schema worth bearing in mind:
	- No files in the repository should be executable, except those in util/
	- None of the files are required to exist
	- None of the text files in the repository root have extensions
	- Source code can have a soft file-module correspondence. With this in
	mind, text files in doc/ should correspond to a module name in src/. These
	text files should follow the grammar outlined in grammar.txt
	- ‘COPYING’ was chosen as the file name for licensing as it is agnostic to
	the British English and American English spelling differences with
	‘licence’/‘license’
	- Make was chosen as the build method for several reasons:
		a. it is not excessively complex
		b. it is available and mature on Unix-like systems
		c. it can target other systems with cross-compilation
		d. it provides a highly scalable declarative recipe language
	- If other build systems are needed, dotfiles and etc/ are at one’s
	disposal
